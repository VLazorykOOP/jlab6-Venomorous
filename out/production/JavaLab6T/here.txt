//
//import java.awt.BorderLayout;
//import java.awt.Dimension;
//import java.awt.event.ActionEvent;
//import java.awt.event.ActionListener;
//import java.io.File;
//import java.io.FileNotFoundException;
//import java.util.Scanner;
//import javax.swing.JButton;
//import javax.swing.JFrame;
//import javax.swing.JLabel;
//import javax.swing.JOptionPane;
//import javax.swing.JPanel;
//import javax.swing.JScrollPane;
//import javax.swing.JTable;
//import javax.swing.JTextField;
//import javax.swing.table.DefaultTableModel;
//
//public class MatrixVectorInterface {
//    private JFrame frame;
//    private JPanel panel;
//    private JButton generateButton;
//    private JLabel sizeLabel;
//    private JTextField sizeField;
//    private JLabel minValueLabel;
//    private JTextField minValueField;
//    private JLabel maxValueLabel;
//    private JTextField maxValueField;
//    private JButton readButton;
//    private JTable matrixTable;
//    private JTable vectorTable;
//
//    public MatrixVectorInterface() {
//        frame = new JFrame("Matrix Vector Interface");
//        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//        frame.setPreferredSize(new Dimension(800, 600)); // Set the preferred size of the frame
//
//        panel = new JPanel();
//        panel.setLayout(new BorderLayout());
//
//        generateButton = new JButton("Generate");
//        generateButton.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                generateMatrixVector();
//            }
//        });
//
//        sizeLabel = new JLabel("Size:");
//        sizeField = new JTextField(10);
//
//        minValueLabel = new JLabel("Min Value:");
//        minValueField = new JTextField(10);
//
//        maxValueLabel = new JLabel("Max Value:");
//        maxValueField = new JTextField(10);
//
//        readButton = new JButton("Read from File");
//        readButton.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                readFromFile();
//            }
//        });
//
//        matrixTable = new JTable();
//        vectorTable = new JTable();
//
//        panel.add(generateButton, BorderLayout.NORTH);
//
//        JPanel inputPanel = new JPanel();
//        inputPanel.add(sizeLabel);
//        inputPanel.add(sizeField);
//        inputPanel.add(minValueLabel);
//        inputPanel.add(minValueField);
//        inputPanel.add(maxValueLabel);
//        inputPanel.add(maxValueField);
//
//        panel.add(inputPanel, BorderLayout.CENTER);
//
//        panel.add(readButton, BorderLayout.SOUTH);
//
//        frame.add(panel);
//
//        frame.pack();
//        frame.setVisible(true);
//    }
//
//    private void generateMatrixVector() {
//        try {
//            int n = Integer.parseInt(sizeField.getText());
//            int min = Integer.parseInt(minValueField.getText());
//            int max = Integer.parseInt(maxValueField.getText());
//
//            if (n <= 0) {
//                throw new IllegalArgumentException("Size must be greater than 0.");
//            }
//
//            double A[][] = new double[n][n];
//            double B[] = new double[n];
//
//            for (int i = 0; i < n; i++) {
//                double summ = 0;
//                for (int j = 0; j < n; j++) {
//                    A[i][j] = Math.floor(Math.random() * (max - min + 1) + min);
//                    summ += A[i][j];
//                }
//                double aver = summ / n;
//                B[i] = aver;
//            }
//
//            // Display the generated matrix A
//            DefaultTableModel matrixModel = new DefaultTableModel(n, n);
//            for (int i = 0; i < n; i++) {
//                for (int j = 0; j < n; j++) {
//                    matrixModel.setValueAt(A[i][j], i, j);
//                }
//            }
//            matrixTable.setModel(matrixModel);
//            // Display the generated vector B
//            DefaultTableModel vectorModel = new DefaultTableModel(n, 1);
//            for (int i = 0; i < n; i++) {
//                vectorModel.setValueAt(B[i], i, 0);
//            }
//            vectorTable.setModel(vectorModel);
//
//            // Add the matrixTable and vectorTable to the panel
//            panel.add(new JScrollPane(matrixTable), BorderLayout.WEST);
//            panel.add(new JScrollPane(vectorTable), BorderLayout.EAST);
//
//            // Refresh the panel
//            panel.revalidate();
//            panel.repaint();
//
//        } catch (NumberFormatException ex) {
//            JOptionPane.showMessageDialog(frame, "Invalid input. Please enter integer values for size, min value, and max value.");
//        } catch (IllegalArgumentException ex) {
//            JOptionPane.showMessageDialog(frame, ex.getMessage());
//        }
//    }
//
//    private void readFromFile() {
//        String filePath = JOptionPane.showInputDialog(frame, "Enter the file path:");
//        if (filePath != null && !filePath.isEmpty()) {
//            try {
//                File file = new File(filePath);
//                Scanner scanner = new Scanner(file);
//
//                // Read the size of the matrix/vector
//                int n = Integer.parseInt(scanner.nextLine());
//                System.out.println("n: " + n);
//
//                double A[][] = new double[n][n];
//                double B[] = new double[n];
//
//                // Read the matrix values
//                for (int i = 0; i < n; i++) {
//                    String[] values = scanner.nextLine().split(",");
//                    for (int j = 0; j < n; j++) {
//                        A[i][j] = Double.parseDouble(values[j]);
//                        System.out.println(A[i][j]);
//                    }
//                    // Calculate the average of row i in matrix A
//                    double sum = 0.0;
//                    for (int j = 0; j < n; j++) {
//                        sum += A[i][j];
//                    }
//                    B[i] = sum / n; // Store the average in vector B
//                    System.out.println("B: " + B[i]);
//                }
//
//                // Display the read matrix A
//                DefaultTableModel matrixModel = new DefaultTableModel(n, n);
//                for (int i = 0; i < n; i++) {
//                    for (int j = 0; j < n; j++) {
//                        matrixModel.setValueAt(A[i][j], i, j);
//                    }
//                }
//                matrixTable.setModel(matrixModel);
//
//                // Display the calculated vector B (averages)
//                DefaultTableModel vectorModel = new DefaultTableModel(n, 1);
//                for (int i = 0; i < n; i++) {
//                    vectorModel.setValueAt(B[i], i, 0);
//                }
//                vectorTable.setModel(vectorModel);
//                JPanel vectorPanel = new JPanel(new BorderLayout());
//                vectorPanel.setPreferredSize(new Dimension(333, vectorTable.getPreferredSize().height));
//                vectorPanel.add(new JScrollPane(vectorTable));
//
//// Add the wrapped vectorTable to the panel
//                panel.add(new JScrollPane(matrixTable), BorderLayout.WEST);
//                panel.add(vectorPanel, BorderLayout.EAST);
////                    // Add the matrixTable and vectorTable to the panel
////                    panel.add(new JScrollPane(matrixTable), BorderLayout.WEST);
////                    panel.add(new JScrollPane(vectorTable), BorderLayout.EAST);
//
//                    // Refresh the panel
//                    panel.revalidate();
//                    panel.repaint();
////                }
//                scanner.close();
//                System.out.println("The end");
//
//            } catch (FileNotFoundException ex) {
//                JOptionPane.showMessageDialog(frame, "File not found.");
//            } catch (NumberFormatException ex) {
//                JOptionPane.showMessageDialog(frame, "Invalid file format.");
//            }
//        } else {
//            JOptionPane.showMessageDialog(frame, "File path is empty.");
//        }
//    }
//
//    public static void main(String[] args) {
//        new MatrixVectorInterface();
//    }
//}
//